I"~`<h1 id="一前言">一、前言</h1>

<p>使用jna和jni都不可避免内存泄露的问题,一般内存泄露分两种,一种本地库本身有内存泄露问题,另一种JVM 内存中 native memory 的内存泄漏.</p>

<p>本地库本身有泄露这种定位起来比较麻烦,毕竟你也没有他的源码不是.native memory 内存泄露这个还比较好定位,首先保护好案发现场,保存好程序运行日志,heap dump 下来,然后就可以慢慢的来调查来,一般都可以石锤.</p>

<p>笔者这次出现问题,主要是因为换了个线程池导致的.为了加快虹软的对比速度,采用了多线程并发的方式进行对比,只要其中一个对比成功,其余任务全部取消.当时为了上线急忙忙的自己实现了,线程池采用的是<code class="language-plaintext highlighter-rouge">ThreadPoolExecutor</code>,并继承Thread对象,在该对象类引入虹软的人脸识别引擎,该方式是为了每个线程独享一个虹软引擎.</p>

<p>上线之后发现程序运行正常,没有什么大问题,只是识别的速度稍微有点慢,于是我想用forkjoin的方式来优化多线程识别,结果换了forkjoinPool 之后就GG了.</p>

<blockquote>
  <p>Tip: 在java 8 中的parallelStream 是用的forkjoin common pool,但是也可以指定线程池的.例如:</p>

  <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//使用指定的pool而非commonPool</span>
<span class="nc">ForkJoinPool</span> <span class="n">forkJoinPool</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ForkJoinPool</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="n">forkJoinPool</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span>
    <span class="c1">//parallel task here, for example</span>
    <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1_000_000</span><span class="o">).</span><span class="na">parallel</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="nl">PrimesPrint:</span><span class="o">:</span><span class="n">isPrime</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">())</span>
<span class="o">).</span><span class="na">get</span><span class="o">();</span>
</code></pre></div>  </div>
</blockquote>

<h1 id="二案发现场">二、案发现场</h1>

<p>先看看虚拟机crash时的日志</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#</span>
<span class="c"># There is insufficient memory for the Java Runtime Environment to continue.</span>
<span class="c"># Native memory allocation (malloc) failed to allocate 396336 bytes for Chunk::new</span>
<span class="c"># Possible reasons:</span>
<span class="c">#   The system is out of physical RAM or swap space</span>
<span class="c">#   In 32 bit mode, the process size limit was hit</span>
<span class="c"># Possible solutions:</span>
<span class="c">#   Reduce memory load on the system</span>
<span class="c">#   Increase physical memory or swap space</span>
<span class="c">#   Check if swap backing store is full</span>
<span class="c">#   Use 64 bit Java on a 64 bit OS</span>
<span class="c">#   Decrease Java heap size (-Xmx/-Xms)</span>
<span class="c">#   Decrease number of Java threads</span>
<span class="c">#   Decrease Java thread stack sizes (-Xss)</span>
<span class="c">#   Set larger code cache with -XX:ReservedCodeCacheSize=</span>
<span class="c"># This output file may be truncated or incomplete.</span>
<span class="c">#</span>
<span class="c">#  Out of Memory Error (allocation.cpp:390), pid=13568, tid=0x0000000000002278</span>
<span class="c">#</span>
<span class="c"># JRE version: Java(TM) SE Runtime Environment (8.0_171-b11) (build 1.8.0_171-b11)</span>
<span class="c"># Java VM: Java HotSpot(TM) 64-Bit Server VM (25.171-b11 mixed mode windows-amd64 compressed oops)</span>
<span class="c"># Failed to write core dump. Minidumps are not enabled by default on client versions of Windows</span>
<span class="c">#</span>

<span class="nt">---------------</span>  T H R E A D  <span class="nt">---------------</span>

Current thread <span class="o">(</span>0x000000001afcc800<span class="o">)</span>:  JavaThread <span class="s2">"C2 CompilerThread1"</span> daemon <span class="o">[</span>_thread_in_native, <span class="nb">id</span><span class="o">=</span>8824, stack<span class="o">(</span>0x000000001b7e0000,0x000000001b8e0000<span class="o">)]</span>

Stack: <span class="o">[</span>0x000000001b7e0000,0x000000001b8e0000]
<span class="o">[</span>error occurred during error reporting <span class="o">(</span>printing stack bounds<span class="o">)</span>, <span class="nb">id </span>0xc0000005]

Native frames: <span class="o">(</span><span class="nv">J</span><span class="o">=</span>compiled Java code, <span class="nv">j</span><span class="o">=</span>interpreted, <span class="nv">Vv</span><span class="o">=</span>VM code, <span class="nv">C</span><span class="o">=</span>native code<span class="o">)</span>


Current CompileTask:
C2: 857396 14693       4       ch.qos.logback.classic.spi.StackTraceElementProxy::getSTEAsString <span class="o">(</span>38 bytes<span class="o">)</span>


<span class="nt">---------------</span>  P R O C E S S  <span class="nt">---------------</span>

Java Threads: <span class="o">(</span> <span class="o">=&gt;</span> current thread <span class="o">)</span>
  0x0000000028049800 JavaThread <span class="s2">"fork-join-face-115"</span> daemon <span class="o">[</span>_thread_blocked, <span class="nb">id</span><span class="o">=</span>4384, stack<span class="o">(</span>0x00000003dcc90000,0x00000003dcd90000<span class="o">)]</span>
<span class="c">#省略线程信息...</span>
</code></pre></div></div>

<p>从crash日志上看,说是jvm申请396336字节大小的native memory 的时候内存不够然后crash掉了.log给出可能导致crash的原因:</p>

<ul>
  <li>The system is out of physical RAM or swap space ,这条不是可能的,服务器的内存是8G,而程序crash掉的时候 是4G多的时候</li>
  <li>In 32 bit mode, the process size limit was hit,这条也不可能,因为服务器是64位的,jdk也是64位的.</li>
</ul>

<p>从上面的日志信息并没有看出什么有用的信息,但有个问题很奇怪明明内存够为什么会crash,在看看程序的运行日志:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">2018</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">14</span> <span class="mi">11</span><span class="o">:</span><span class="mi">10</span><span class="o">:</span><span class="mi">22</span> <span class="o">|</span> <span class="no">ERROR</span> <span class="o">|</span> <span class="n">face</span><span class="o">-</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">0.2</span><span class="o">-</span><span class="nc">Thread</span> <span class="o">|</span> <span class="n">com</span><span class="o">.</span><span class="na">zzwtec</span><span class="o">.</span><span class="na">camera</span><span class="o">.</span><span class="na">fx</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">face</span><span class="o">.</span><span class="na">FaceService</span><span class="o">.</span><span class="na">lambda</span><span class="n">$init</span><span class="err">$</span><span class="mi">1</span><span class="o">:</span><span class="mi">129</span> <span class="o">|</span> <span class="o">[</span><span class="n">face</span><span class="o">-</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">0.2</span><span class="o">-</span><span class="nc">Thread</span><span class="o">]</span>  <span class="n">人脸检测任务出现异常</span><span class="o">!</span>
<span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Error</span><span class="o">:</span> <span class="nc">Invalid</span> <span class="n">memory</span> <span class="n">access</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">jna</span><span class="o">.</span><span class="na">Native</span><span class="o">.</span><span class="na">invokeInt</span><span class="o">(</span><span class="nc">Native</span> <span class="nc">Method</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">jna</span><span class="o">.</span><span class="na">Function</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="nc">Function</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">419</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">jna</span><span class="o">.</span><span class="na">Function</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="nc">Function</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">354</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">jna</span><span class="o">.</span><span class="na">Library</span><span class="n">$Handler</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="nc">Library</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">244</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">proxy</span><span class="o">.</span><span class="n">$Proxy150</span><span class="o">.</span><span class="na">AFT_FSDK_InitialFaceEngine</span><span class="o">(</span><span class="nc">Unknown</span> <span class="nc">Source</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">zzwtec</span><span class="o">.</span><span class="na">camera</span><span class="o">.</span><span class="na">fx</span><span class="o">.</span><span class="na">face</span><span class="o">.</span><span class="na">Tracking</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="nc">Tracking</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">34</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">zzwtec</span><span class="o">.</span><span class="na">camera</span><span class="o">.</span><span class="na">fx</span><span class="o">.</span><span class="na">face</span><span class="o">.</span><span class="na">FaceThread</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="nc">FaceThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">17</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadFactoryBuilder</span><span class="err">$</span><span class="mi">1</span><span class="o">.</span><span class="na">newThread</span><span class="o">(</span><span class="nc">ThreadFactoryBuilder</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">163</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="nc">Unknown</span> <span class="nc">Source</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="o">.</span><span class="na">addWorker</span><span class="o">(</span><span class="nc">Unknown</span> <span class="nc">Source</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="o">.</span><span class="na">processWorkerExit</span><span class="o">(</span><span class="nc">UnknownSource</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="o">.</span><span class="na">runWorker</span><span class="o">(</span><span class="nc">Unknown</span> <span class="nc">So</span>
</code></pre></div></div>

<p>大量出现<code class="language-plaintext highlighter-rouge">java.lang.Error: Invalid memory access</code>的错误,但有个问题值得注意是我创建的是个线程池,按道理是不会频繁创建线程的,为啥会这么频繁的创建线程?而且创建线程的时候都是在虹软SDK 初始化引擎的时候挂掉了.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">FD_WORK_BUF_SIZE</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">;</span><span class="c1">// 20 MB</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">nScale</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span> <span class="c1">// 有效值范围[2,50]</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX_FACE_NUM</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span> <span class="c1">// 有效值范围[1,50]</span>
<span class="kd">private</span> <span class="nc">Pointer</span> <span class="n">hFDEngine</span><span class="o">;</span>
<span class="kd">public</span> <span class="nf">Detection</span><span class="o">(){</span>
        <span class="nc">String</span> <span class="no">APPID</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">String</span> <span class="no">FD_SDKKEY</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="nc">OSUtils</span><span class="o">.</span><span class="na">getCurrentOSType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">OSUtils</span><span class="o">.</span><span class="na">OSType</span><span class="o">.</span><span class="na">Windows</span><span class="o">){</span>
            <span class="no">APPID</span> <span class="o">=</span> <span class="nc">ArcFace</span><span class="o">.</span><span class="na">appid_Windows_x64</span><span class="o">;</span>
            <span class="no">FD_SDKKEY</span> <span class="o">=</span> <span class="nc">ArcFace</span><span class="o">.</span><span class="na">sdkkey_FD_Windows_x64</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nc">OSUtils</span><span class="o">.</span><span class="na">getCurrentOSType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">OSUtils</span><span class="o">.</span><span class="na">OSType</span><span class="o">.</span><span class="na">Linux</span><span class="o">){</span>
            <span class="no">APPID</span> <span class="o">=</span> <span class="nc">ArcFace</span><span class="o">.</span><span class="na">appid_Linux_x64</span><span class="o">;</span>
            <span class="no">FD_SDKKEY</span> <span class="o">=</span> <span class="nc">ArcFace</span><span class="o">.</span><span class="na">sdkkey_FD_Linux_x64</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">Pointer</span> <span class="n">pFDWorkMem</span> <span class="o">=</span> <span class="nc">CLibrary</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">malloc</span><span class="o">(</span><span class="no">FD_WORK_BUF_SIZE</span><span class="o">);</span>
        <span class="nc">PointerByReference</span> <span class="n">phFDEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PointerByReference</span><span class="o">();</span>
        <span class="nc">NativeLong</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">AFD_FSDKEngine</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">AFD_FSDK_InitialFaceEngine</span><span class="o">(</span>
                <span class="no">APPID</span><span class="o">,</span>
                <span class="no">FD_SDKKEY</span><span class="o">,</span>
                <span class="n">pFDWorkMem</span><span class="o">,</span>
                <span class="no">FD_WORK_BUF_SIZE</span><span class="o">,</span>
                <span class="n">phFDEngine</span><span class="o">,</span>
                <span class="n">FSDK_OrientPriority</span><span class="o">.</span><span class="na">FSDK_OPF_0_HIGHER_EXT</span><span class="o">,</span>
                <span class="n">nScale</span><span class="o">,</span>
                <span class="no">MAX_FACE_NUM</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">ret</span><span class="o">.</span><span class="na">longValue</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">CLibrary</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">free</span><span class="o">(</span><span class="n">pFDWorkMem</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"AFD_FSDK_InitialFaceEngine ret 0x%x %s"</span><span class="o">,</span> <span class="n">ret</span><span class="o">.</span><span class="na">longValue</span><span class="o">(),</span> <span class="nc">Error</span><span class="o">.</span><span class="na">getErrorMsg</span><span class="o">(</span><span class="n">ret</span><span class="o">.</span><span class="na">longValue</span><span class="o">())));</span>
        <span class="o">}</span>
        <span class="n">hFDEngine</span> <span class="o">=</span> <span class="n">phFDEngine</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>可以通过以上代码知道,初始化一个Detection对象至少需要20M内存,而且笔者把三个引擎对象全部放在一个线程对象里面,三个引擎全部初始化完毕至少需要100M的内存.如果线程频繁的创建的确会导致内存泄露的问题,因为笔者没有考虑到线程被频繁创建的情况,所以没有写释放内存的方法和复写finalize方法.</p>

<h1 id="三原因分析">三、原因分析</h1>

<p>通过crash日志和运行日志可以看出:</p>

<pre><code class="language-mermaid">graph TD
A[JVM]--&gt; B[crash]
B --&gt; C[没有足够的内存]
C --&gt; D[频繁创建线程对象]
D --&gt; E1[挂掉了一个线程,线程池为了维持线程的数量而创建]
D --&gt; E2[内存不够导致线程挂掉]
E2 --&gt; E1
E1 --&gt; C
C --&gt; B
</code></pre>

<p>emmmm,看起来还是怪怪的,这TM不是一个循环嘛!思绪已经陷入死胡同了,好不容易找到线索又给断了.</p>

<h1 id="四还原案发现场">四、还原案发现场</h1>

<p>既然线索断了,就看能不能还原案发现场了,就是本地复现一次.但这种复现是要有点技巧的,并不是把整个程序跑跑之类,一定要找关键代码,来测试.从日志可以看出是jna这块儿出的问题,那么在笔者这个项目中用到了jna的是人脸检测和人脸对比了.</p>

<p>于是笔者分别把这两块儿功能的代码在本地代码跑了10W次,在人脸检测这块儿并没有发现内存泄露的情况,但在人脸比对的时候内存泄露显著,并且还复现了jvm crash的这种情况.</p>

<p>那么就是有点意思了,说明出现问题的就是人脸对比了.人脸对比这块儿,是用的forkjoinPool 的线程池,之前没用这个的时候就没问题,难道forkjoinPool这个线程池和普通的threadPoolExecutor不一样?</p>

<p>于是怀着揭开真相的心情,启动了jvisualvm,通过jvisualvm观察可以发现,forkjoinPool线程池接受一次任务会启用物理机最大核心数的线程数量,也就是说在2核4线程的机器上,forkjoinPool会开启4条线程来处理任务.</p>

<p>但这4条线程并不是复用,而是一次性的.通过观察可以看出当这4条线程在一定时间内没有任务执行的时候会被销毁.毕竟工作窃取算法没工作窃取了嘛,窃笑.</p>

<h1 id="五石锤">五、石锤</h1>

<p>通过案发现场的还原,得出的结论是:</p>

<pre><code class="language-mermaid">graph TD
A[检测到人脸] --&gt; B[提交任务给forkjoinPool]
B --&gt; C[forkjoinPool线程池fork出4条线程]
C --&gt; D[线程初始化]
D --&gt; E[初始化虹软引擎,4条线程总共需要400M]
E --&gt; F[人脸比对任务完成,线程销毁,并没有释放native memory]

</code></pre>

<p>这个过程,会在程序运行的时候循环很多次.</p>

<p>以上只是我的猜想,有个疑惑的是,线程为什么不复用,需要反复创建怎么多次?</p>

<p>于是看了一下源码,普通的threadPoolExecutor里面是有个任务队列的,创建出的线程会一直pll这个队列,如果队列中就任务,那么该线程就会执行这个任务,如果队列没有任务那么该线程就会wait,直到有任务为止.</p>

<p>与threadPoolExecutor不同的是forkjoinPool采用分而治之的方式来并行处理任务.当任务添加到forkjoinPool时,会把任务不断的分割直到任务足够的小才会开始执行.如果这里的处理的方式和threadPoolExecutor一样,处理完任务就wait,就无法分而治之了.</p>

<p>通过以上的分析,笔者把创建线程初始化逻辑改了一下,把虹软的引擎缓存起来,创建线程的时候每个线程分配一个.这样不管创建多少个线程,整个程序只会有缓存起来的那几个引擎,不会随着线程的创建而创建.笔者把修改好的代码进行10W次循环测试,果然没有复现内存泄露的问题,后面又进行了12小时的循环测试,也没发现问题.线程池的问题,可谓是石锤了.</p>

<h1 id="六结论">六、结论</h1>

<p>遇到这种jna的问题,一定不要慌,要通过多方面的分析来断案,不要怕crash的日志.基础还是很重要呀,原来forkjoinPool不重复使用线程,这点之前都没注意过.认真学习.🤣🤣🤣🤣🤣🤣🤣</p>
:ET