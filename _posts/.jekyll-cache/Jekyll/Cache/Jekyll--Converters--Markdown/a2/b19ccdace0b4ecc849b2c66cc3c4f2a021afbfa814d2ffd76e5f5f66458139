I"\@<h1 id="rxjava学习笔记一">RxJava学习笔记(一)</h1>

<blockquote>
  <p>注意:这篇文章只是本人学习过程中的的笔记而已,如有错误实属正常,欢迎一起交流,本文涉及的RxJava的版本是1.x,还有一点是文中所指的Observer在代码中等价于Subscriber,Subscriber实现了Observer接口并且多了一个onStart的方法.</p>
</blockquote>

<h2 id="一简介">一、简介</h2>
<ul>
  <li>什么是RxJava
    <ul>
      <li>这个怎么说呢,用官方项目的一句话就是”a library for composing asynchronous and event-based programs using observable sequences for the Java VM”,翻译过来就是,一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库.是不是没看懂??没关系 我也不是很懂.</li>
    </ul>
  </li>
  <li>RxJava有啥好处
    <ul>
      <li>RxJava主要是用在异步操作上面的,那么问题来了,那么多异步操作的库,RxJava有啥优点呢?其主要的优点是简洁,解决回调地狱可是好帮手呀.还支持背压(背压是啥,后面再讲)</li>
    </ul>
  </li>
  <li>RxJava设计思想
    <ul>
      <li>RxJava 主要是基于观察者模式进行设计的,观察者模式涉及到观察者和被观察者这两个概念.什么是观察者模式呢?举个例子,你喜欢一个女孩,但是那个女孩已经有男朋友了,不过你还是不死心一如既往的关心她,直到那个女孩分手你就知道有机会了,要下手了.这个例子里面女孩是被观察者而你是观察者,女孩分手了,你收到了一个事件,然后就开始行动了.然而在程序里面是这样的,你订阅那个女孩或者注册一个监听器,这样在那个女孩没有分手的时候你也犯不着每天关心她,因为这样也没有意义.那么怎么才能知道那个女孩分手了,你好采取行动呢??这点不用担心,只要你订阅了那个女孩或者说是注册了监听器的,女孩分手的时候会主动通知你的,是不是感觉很棒??别傻了,现实生活中如果你被主动通知了,顶多你算是个备胎.</li>
      <li>以上的例子如果感觉太抽象的话,可以这样来想,写过java的swing吗?写过java的awt吗??写过那就好理解多.在举个例子,在swing中,创建一个按钮,点击一个按钮弹出消息框.代码通常是这样的,先new Button(),然后再button上注册里一个onClickListener.这就是一个个观察者和被观察者.在用户点击这个button的时候会触发一个click事件,button会通知注册在它身上的所有监听器,包括刚才注册的OnClickListener.</li>
    </ul>
  </li>
  <li>RxJava中的基本概念
    <ul>
      <li>Observable 被观察者</li>
      <li>Observer 观察者</li>
      <li>Subscribe 订阅</li>
      <li>Event 事件,以下是默认事件.
        <ul>
          <li>onNext 普通的事件回调</li>
          <li>onCompleted 当事件链完成时的触发</li>
          <li>onError 当事件链出现错误时的触发</li>
          <li>onStart 调用Subscribe方法的时候触发,这个是有默认实现的.只不过默认实现是什么也没做而已.</li>
        </ul>
      </li>
    </ul>

    <p>一般的流程是,创建好被观察者(Observable)和观察者(Observer),两者通过订阅(Subscribe)联系到一起,当被观察者(Observable)有事件(Event)产生的时候会通知观察者(Observer)做相应的处理.</p>
  </li>
</ul>

<h2 id="二创建一个observable">二、创建一个Observable</h2>
<p>创建Observable可以通过Observable的静态API <code class="language-plaintext highlighter-rouge">public static &lt;T&gt; Observable&lt;T&gt; create(OnSubscribe&lt;T&gt; f)</code> 创建,create重载的api有3三个.先看这个API吧,剩下的3个重载API后面再说吧.这个API需要一个OnSubscribe对象作为参数,这个OnSubscribe对象是来干啥的呢??这个其实就是一个用来产生事件的监听器而已(如果这么理解的话),当Observer订阅了Observable就会调用OnSubscribe的call方法.下面贴出create方法, OnSubscribe,的完整代码,便于理解.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
		<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Observable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">create</span><span class="o">(</span><span class="nc">OnSubscribe</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
		    <span class="k">return</span> <span class="k">new</span> <span class="nc">Observable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(</span><span class="nc">RxJavaHooks</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">f</span><span class="o">));</span><span class="c1">//这个可以先不管</span>
		<span class="o">}</span>
	    
	    
	    <span class="c1">//可以看到OnSubscribe 是个集成Action1的接口而已,接下来看看Action1的代码</span>
		<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OnSubscribe</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Action1</span><span class="o">&lt;</span><span class="nc">Subscriber</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
			  <span class="c1">// cover for generics insanity</span>
		<span class="o">}</span>
		<span class="c1">//Action1 这个接口默认只有一个方法. 然而这个接口却是集成了Action这个接口.Action接口是个空接口,Action接口继承了Function接口,Function接口也是空接口,由于都是空接口就不贴代码出来了.</span>
		<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Action1</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Action</span> <span class="o">{</span>
		    <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
		<span class="o">}</span>
		
</code></pre></div></div>

<p>那么创建Observable的代码就好理解了,以下是创建Observable的代码.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="c1">//这样就创建了一个Observable</span>
	<span class="nc">Observable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">observable</span> <span class="o">=</span> <span class="nc">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="o">{</span>
	            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
	            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"2"</span><span class="o">);</span>
	            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"3"</span><span class="o">);</span>
	            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"4"</span><span class="o">);</span>
	            <span class="n">subscriber</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">();</span>
	        <span class="o">});</span>
</code></pre></div></div>
<p>上面代码中的Subscriber是实现了观察者(Observer)接口.上面的代码解释为,当Observable被订阅的时候就触发OnSubscribe,在OnSubscribe中触发Subscriber的onNex方法t四次和onCompleted方法一次.</p>

<h2 id="三创建一个subscriber">三、创建一个Subscriber</h2>

<p>emmmmm目前还没有Subscriber,所以要创建它.创建Subscriber也很简单,如下代码.</p>

<blockquote>
  <p>Subscriber 等价于 Observer</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Subscriber</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">subscriber</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"subscriber onCompleted"</span><span class="o">);</span>
        <span class="o">}</span>
	
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"subscriber onError"</span><span class="o">);</span>
        <span class="o">}</span>
	
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"subscriber out:"</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
	
    <span class="o">};</span>
</code></pre></div></div>
<h2 id="四建立订阅关系">四、建立订阅关系</h2>
<p>创建好Observable和Subscriber以后,要把二者建立订阅关系整个流程才算搞定.建立订阅关系代码如下</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 	<span class="n">observable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">subscriber</span><span class="o">);</span>
</code></pre></div></div>
<p>一句代码,很简单对不对.问题是为啥是被观察者订阅观察者呢??其实这是方便链式api的书写(习惯就好).完整代码如下</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>


        <span class="nc">Observable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">observable</span> <span class="o">=</span> <span class="nc">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"2"</span><span class="o">);</span>
            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"3"</span><span class="o">);</span>
            <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="s">"4"</span><span class="o">);</span>
            <span class="n">subscriber</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">();</span>
        <span class="o">});</span>


        <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">subscriber</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="o">()</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"subscriber onCompleted"</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"subscriber onError"</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"subscriber out:"</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>



        <span class="n">observable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">subscriber</span><span class="o">);</span>



    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果如下:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>subscriber out:1
subscriber out:2
subscriber out:3
subscriber out:4
subscriber onCompleted
</code></pre></div></div>

<h2 id="五流程关系">五、流程关系</h2>

<pre><code class="language-mermaid">sequenceDiagram
Observable-&gt;&gt;Subscriber:1.subscribe(订阅);
Subscriber-&gt;&gt;Observable:2.触发Subscribe事件;
Observable-&gt;&gt;OnSubscribe:3.调用OnSubscribe的call方法;
OnSubscribe-&gt;&gt;Subscriber:4:onNext("1");
OnSubscribe-&gt;&gt;Subscriber:5:onNext("2");
OnSubscribe-&gt;&gt;Subscriber:6:onNext("3");
OnSubscribe-&gt;&gt;Subscriber:7:onNext("4");
OnSubscribe-&gt;&gt;Subscriber:8:onCompleted();
</code></pre>

<h2 id="六总结">六、总结</h2>

<p>只要把里面的观察者和被观察者这两者的概念掌握牢固,还是简单.不过看来看去好像没有啥实际的作用,emmmm目前看来是的.但后面操作符和线程调度可有意思多了.</p>

:ET