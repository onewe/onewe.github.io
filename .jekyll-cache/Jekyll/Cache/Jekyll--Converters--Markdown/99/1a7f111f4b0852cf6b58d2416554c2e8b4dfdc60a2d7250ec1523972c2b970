I"u<h1 id="一前言">一、前言</h1>

<p>​	在xml标签解析完之后会产生一个<code class="language-plaintext highlighter-rouge">BeanDefinitionHolder</code>对象,紧接着就来谈谈,<code class="language-plaintext highlighter-rouge">spring</code>用这个对象来干嘛吧.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//DefaultBeanDefinitionDocumentReader.java</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">processBeanDefinition</span><span class="o">(</span><span class="nc">Element</span> <span class="n">ele</span><span class="o">,</span> <span class="nc">BeanDefinitionParserDelegate</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 解析xml元素 </span>
		<span class="nc">BeanDefinitionHolder</span> <span class="n">bdHolder</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">.</span><span class="na">parseBeanDefinitionElement</span><span class="o">(</span><span class="n">ele</span><span class="o">);</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">bdHolder</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// 装饰</span>
			<span class="n">bdHolder</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">.</span><span class="na">decorateBeanDefinitionIfRequired</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="n">bdHolder</span><span class="o">);</span>
			<span class="k">try</span> <span class="o">{</span>
				<span class="c1">// Register the final decorated instance.</span>
				<span class="c1">// 注册到容器中</span>
				<span class="nc">BeanDefinitionReaderUtils</span><span class="o">.</span><span class="na">registerBeanDefinition</span><span class="o">(</span><span class="n">bdHolder</span><span class="o">,</span> <span class="n">getReaderContext</span><span class="o">().</span><span class="na">getRegistry</span><span class="o">());</span>
			<span class="o">}</span>
			<span class="k">catch</span> <span class="o">(</span><span class="nc">BeanDefinitionStoreException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">getReaderContext</span><span class="o">().</span><span class="na">error</span><span class="o">(</span><span class="s">"Failed to register bean definition with name '"</span> <span class="o">+</span>
						<span class="n">bdHolder</span><span class="o">.</span><span class="na">getBeanName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">,</span> <span class="n">ele</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="c1">// Send registration event.</span>
			<span class="c1">// 发送事件</span>
			<span class="n">getReaderContext</span><span class="o">().</span><span class="na">fireComponentRegistered</span><span class="o">(</span><span class="k">new</span> <span class="nc">BeanComponentDefinition</span><span class="o">(</span><span class="n">bdHolder</span><span class="o">));</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre></div></div>

<p>​	解析xml这边已经记录过了,接下来的重点在于<code class="language-plaintext highlighter-rouge">delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</code>,从方法名可以看出意思大概为:如果有必要就进行装饰.说到装饰感觉跟装饰模式有关.</p>

<h1 id="二分析">二、分析</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">BeanDefinitionHolder</span> <span class="nf">decorateBeanDefinitionIfRequired</span><span class="o">(</span><span class="nc">Element</span> <span class="n">ele</span><span class="o">,</span> <span class="nc">BeanDefinitionHolder</span> <span class="n">originalDef</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nf">decorateBeanDefinitionIfRequired</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="n">originalDef</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * Decorate the given bean definition through a namespace handler, if applicable.
	 * @param ele the current element
	 * @param originalDef the current bean definition
	 * @param containingBd the containing bean definition (if any)
	 * @return the decorated bean definition
	 */</span>
	<span class="kd">public</span> <span class="nc">BeanDefinitionHolder</span> <span class="nf">decorateBeanDefinitionIfRequired</span><span class="o">(</span>
			<span class="nc">Element</span> <span class="n">ele</span><span class="o">,</span> <span class="nc">BeanDefinitionHolder</span> <span class="n">originalDef</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">BeanDefinition</span> <span class="n">containingBd</span><span class="o">)</span> <span class="o">{</span>

		<span class="nc">BeanDefinitionHolder</span> <span class="n">finalDefinition</span> <span class="o">=</span> <span class="n">originalDef</span><span class="o">;</span>
		<span class="c1">// 遍历节点,寻找可以装饰的属性</span>
		<span class="c1">// Decorate based on custom attributes first.</span>
		<span class="nc">NamedNodeMap</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">ele</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="n">finalDefinition</span> <span class="o">=</span> <span class="n">decorateIfRequired</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">finalDefinition</span><span class="o">,</span> <span class="n">containingBd</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="c1">// 遍历子节点,寻找可以装饰的子节点</span>
		<span class="c1">// Decorate based on custom nested elements.</span>
		<span class="nc">NodeList</span> <span class="n">children</span> <span class="o">=</span> <span class="n">ele</span><span class="o">.</span><span class="na">getChildNodes</span><span class="o">();</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">children</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">children</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getNodeType</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Node</span><span class="o">.</span><span class="na">ELEMENT_NODE</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">finalDefinition</span> <span class="o">=</span> <span class="n">decorateIfRequired</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">finalDefinition</span><span class="o">,</span> <span class="n">containingBd</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">finalDefinition</span><span class="o">;</span>
	<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>遍历当前节点的所有属性进行装饰</li>
  <li>遍历当前节点的所有子节点进行装饰</li>
  <li>返回<code class="language-plaintext highlighter-rouge">BeanDefinitionHolder</code></li>
</ol>

<p>​	从上面可以看到核心方法在于<code class="language-plaintext highlighter-rouge">decorateIfRequired</code>,进去看一看.</p>

<h2 id="21-decorateifrequired">2.1 decorateIfRequired</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">BeanDefinitionHolder</span> <span class="nf">decorateIfRequired</span><span class="o">(</span>
			<span class="nc">Node</span> <span class="n">node</span><span class="o">,</span> <span class="nc">BeanDefinitionHolder</span> <span class="n">originalDef</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">BeanDefinition</span> <span class="n">containingBd</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 获取名称空间URI</span>
		<span class="nc">String</span> <span class="n">namespaceUri</span> <span class="o">=</span> <span class="n">getNamespaceURI</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
		<span class="c1">// 判断是否是自定义名称空间,只对自定义名称空间进行处理</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">namespaceUri</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isDefaultNamespace</span><span class="o">(</span><span class="n">namespaceUri</span><span class="o">))</span> <span class="o">{</span>
			<span class="c1">// 获取名称空间对应的处理器</span>
			<span class="nc">NamespaceHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">readerContext</span><span class="o">.</span><span class="na">getNamespaceHandlerResolver</span><span class="o">().</span><span class="na">resolve</span><span class="o">(</span><span class="n">namespaceUri</span><span class="o">);</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// 进行装饰处理</span>
				<span class="nc">BeanDefinitionHolder</span> <span class="n">decorated</span> <span class="o">=</span>
						<span class="n">handler</span><span class="o">.</span><span class="na">decorate</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">originalDef</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ParserContext</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">readerContext</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">containingBd</span><span class="o">));</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">decorated</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
					<span class="k">return</span> <span class="n">decorated</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">namespaceUri</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"http://www.springframework.org/schema/"</span><span class="o">))</span> <span class="o">{</span>
				<span class="n">error</span><span class="o">(</span><span class="s">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> <span class="o">+</span> <span class="n">namespaceUri</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">,</span> <span class="n">node</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="k">else</span> <span class="o">{</span>
				<span class="c1">// A custom namespace, not to be handled by Spring - maybe "xml:...".</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
					<span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"No Spring NamespaceHandler found for XML schema namespace ["</span> <span class="o">+</span> <span class="n">namespaceUri</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">originalDef</span><span class="o">;</span>
	<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>判断是否是默认名称命名空间</li>
  <li>非默认进行装饰处理</li>
</ol>

<p>​	那么这个装饰是个什么鬼呢？通过判断是否是默认名称空间这个条件感觉在前面分析的时候遇到过.从这个条件可以看出这个逻辑与最后达到的效果与前面自定义标签是一回事.可以看看官方给出的例子.</p>

<ul>
  <li>用于测试的xml</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
	   <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	   <span class="na">xmlns:test=</span><span class="s">"http://www.springframework.org/schema/beans/test"</span>
	   <span class="na">xmlns:util=</span><span class="s">"http://www.springframework.org/schema/util"</span>
	   <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util-2.0.xsd
       http://www.springframework.org/schema/beans/test https://www.springframework.org/schema/beans/factory/xml/support/CustomNamespaceHandlerTests.xsd"</span>
	<span class="na">default-lazy-init=</span><span class="s">"true"</span><span class="nt">&gt;</span>

	<span class="nt">&lt;test:testBean</span> <span class="na">id=</span><span class="s">"testBean"</span> <span class="na">name=</span><span class="s">"Rob Harrop"</span> <span class="na">age=</span><span class="s">"23"</span><span class="nt">/&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"customisedTestBean"</span> <span class="na">class=</span><span class="s">"org.springframework.tests.sample.beans.TestBean"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;test:set</span> <span class="na">name=</span><span class="s">"Rob Harrop"</span> <span class="na">age=</span><span class="s">"23"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"debuggingTestBean"</span> <span class="na">class=</span><span class="s">"org.springframework.tests.sample.beans.TestBean"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;test:debug/&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">value=</span><span class="s">"Rob Harrop"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">value=</span><span class="s">"23"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"debuggingTestBeanNoInstance"</span> <span class="na">class=</span><span class="s">"org.springframework.context.ApplicationListener"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;test:debug/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"chainedTestBean"</span> <span class="na">class=</span><span class="s">"org.springframework.tests.sample.beans.TestBean"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;test:debug/&gt;</span>
		<span class="nt">&lt;test:nop/&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">value=</span><span class="s">"Rob Harrop"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">value=</span><span class="s">"23"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>

	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"decorateWithAttribute"</span> <span class="na">class=</span><span class="s">"org.springframework.tests.sample.beans.TestBean"</span> <span class="na">test:object-name=</span><span class="s">"foo"</span><span class="nt">/&gt;</span>

	<span class="nt">&lt;util:list</span> <span class="na">id=</span><span class="s">"list.of.things"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;test:person</span> <span class="na">name=</span><span class="s">"Fiona Apple"</span> <span class="na">age=</span><span class="s">"20"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;test:person</span> <span class="na">name=</span><span class="s">"Harriet Wheeler"</span> <span class="na">age=</span><span class="s">"30"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/util:list&gt;</span>

	<span class="nt">&lt;util:set</span> <span class="na">id=</span><span class="s">"set.of.things"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;test:person</span> <span class="na">name=</span><span class="s">"Fiona Apple"</span> <span class="na">age=</span><span class="s">"20"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;test:person</span> <span class="na">name=</span><span class="s">"Harriet Wheeler"</span> <span class="na">age=</span><span class="s">"30"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/util:set&gt;</span>

	<span class="nt">&lt;util:map</span> <span class="na">id=</span><span class="s">"map.of.things"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"fiona.apple"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;test:person</span> <span class="na">name=</span><span class="s">"Fiona Apple"</span> <span class="na">age=</span><span class="s">"20"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;/entry&gt;</span>
		<span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"harriet.wheeler"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;test:person</span> <span class="na">name=</span><span class="s">"Harriet Wheeler"</span> <span class="na">age=</span><span class="s">"30"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;/entry&gt;</span>
	<span class="nt">&lt;/util:map&gt;</span>

<span class="nt">&lt;/beans&gt;</span>


</code></pre></div></div>

<ul>
  <li>用于测试的xsd文件</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span>

<span class="nt">&lt;xsd:schema</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans/test"</span>
			<span class="na">xmlns:xsd=</span><span class="s">"http://www.w3.org/2001/XMLSchema"</span>
			<span class="na">targetNamespace=</span><span class="s">"http://www.springframework.org/schema/beans/test"</span>
			<span class="na">elementFormDefault=</span><span class="s">"qualified"</span><span class="nt">&gt;</span>
	
	<span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">"person"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;xsd:complexType&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">type=</span><span class="s">"xsd:string"</span> <span class="na">use=</span><span class="s">"optional"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">type=</span><span class="s">"xsd:string"</span> <span class="na">use=</span><span class="s">"required"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">type=</span><span class="s">"xsd:integer"</span> <span class="na">use=</span><span class="s">"required"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;/xsd:complexType&gt;</span>
	<span class="nt">&lt;/xsd:element&gt;</span>

	<span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">"testBean"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;xsd:complexType&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">type=</span><span class="s">"xsd:string"</span> <span class="na">use=</span><span class="s">"required"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">type=</span><span class="s">"xsd:string"</span> <span class="na">use=</span><span class="s">"required"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">type=</span><span class="s">"xsd:integer"</span> <span class="na">use=</span><span class="s">"required"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;/xsd:complexType&gt;</span>
	<span class="nt">&lt;/xsd:element&gt;</span>

	<span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">"set"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;xsd:complexType&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"name"</span> <span class="na">type=</span><span class="s">"xsd:string"</span> <span class="na">use=</span><span class="s">"required"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
			<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"age"</span> <span class="na">type=</span><span class="s">"xsd:integer"</span> <span class="na">use=</span><span class="s">"required"</span> <span class="na">form=</span><span class="s">"unqualified"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;/xsd:complexType&gt;</span>
	<span class="nt">&lt;/xsd:element&gt;</span>

	<span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">"debug"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">"nop"</span><span class="nt">/&gt;</span>

	<span class="nt">&lt;xsd:attribute</span> <span class="na">name=</span><span class="s">"object-name"</span> <span class="na">type=</span><span class="s">"xsd:string"</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/xsd:schema&gt;</span>

</code></pre></div></div>

<ul>
  <li>用于测试的property文件</li>
</ul>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">http\://www.springframework.org/schema/beans/</span><span class="py">test</span><span class="p">=</span><span class="s">org.springframework.beans.factory.xml.support.TestNamespaceHandler</span>
<span class="err">http\://www.springframework.org/schema/</span><span class="py">util</span><span class="p">=</span><span class="s">org.springframework.beans.factory.xml.UtilNamespaceHandler</span>
</code></pre></div></div>

<ul>
  <li>测试代码</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</span>

<span class="kn">package</span> <span class="nn">org.springframework.beans.factory.xml.support</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.BeforeEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.w3c.dom.Attr</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.w3c.dom.Element</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.w3c.dom.Node</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.xml.sax.InputSource</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.aop.Advisor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.aop.framework.Advised</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.aop.interceptor.DebugInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.aop.support.AopUtils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.BeanInstantiationException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.MutablePropertyValues</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.BeanCreationException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.config.BeanDefinition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.config.BeanDefinitionHolder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.support.AbstractBeanDefinition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.support.BeanDefinitionBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.support.RootBeanDefinition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.BeanDefinitionDecorator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.BeanDefinitionParser</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.NamespaceHandlerResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.NamespaceHandlerSupport</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.ParserContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.PluggableSchemaResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.xml.XmlBeanDefinitionReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.GenericApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.core.io.ClassPathResource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.core.io.Resource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.tests.aop.interceptor.NopInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.tests.sample.beans.ITestBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.tests.sample.beans.TestBean</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">.</span><span class="na">format</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThatExceptionOfType</span><span class="o">;</span>

<span class="cm">/**
 * Unit tests for custom XML namespace handler implementations.
 *
 * @author Rob Harrop
 * @author Rick Evans
 * @author Chris Beams
 * @author Juergen Hoeller
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomNamespaceHandlerTests</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="no">CLASS</span> <span class="o">=</span> <span class="nc">CustomNamespaceHandlerTests</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">CLASSNAME</span> <span class="o">=</span> <span class="no">CLASS</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">FQ_PATH</span> <span class="o">=</span> <span class="s">"org/springframework/beans/factory/xml/support"</span><span class="o">;</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NS_PROPS</span> <span class="o">=</span> <span class="n">format</span><span class="o">(</span><span class="s">"%s/%s.properties"</span><span class="o">,</span> <span class="no">FQ_PATH</span><span class="o">,</span> <span class="no">CLASSNAME</span><span class="o">);</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NS_XML</span> <span class="o">=</span> <span class="n">format</span><span class="o">(</span><span class="s">"%s/%s-context.xml"</span><span class="o">,</span> <span class="no">FQ_PATH</span><span class="o">,</span> <span class="no">CLASSNAME</span><span class="o">);</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">TEST_XSD</span> <span class="o">=</span> <span class="n">format</span><span class="o">(</span><span class="s">"%s/%s.xsd"</span><span class="o">,</span> <span class="no">FQ_PATH</span><span class="o">,</span> <span class="no">CLASSNAME</span><span class="o">);</span>

	<span class="kd">private</span> <span class="nc">GenericApplicationContext</span> <span class="n">beanFactory</span><span class="o">;</span>


	<span class="nd">@BeforeEach</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">NamespaceHandlerResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultNamespaceHandlerResolver</span><span class="o">(</span><span class="no">CLASS</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="no">NS_PROPS</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericApplicationContext</span><span class="o">();</span>
		<span class="nc">XmlBeanDefinitionReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XmlBeanDefinitionReader</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">);</span>
		<span class="n">reader</span><span class="o">.</span><span class="na">setNamespaceHandlerResolver</span><span class="o">(</span><span class="n">resolver</span><span class="o">);</span>
		<span class="n">reader</span><span class="o">.</span><span class="na">setValidationMode</span><span class="o">(</span><span class="nc">XmlBeanDefinitionReader</span><span class="o">.</span><span class="na">VALIDATION_XSD</span><span class="o">);</span>
		<span class="n">reader</span><span class="o">.</span><span class="na">setEntityResolver</span><span class="o">(</span><span class="k">new</span> <span class="nc">DummySchemaResolver</span><span class="o">());</span>
		<span class="n">reader</span><span class="o">.</span><span class="na">loadBeanDefinitions</span><span class="o">(</span><span class="n">getResource</span><span class="o">());</span>
		<span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">refresh</span><span class="o">();</span>
	<span class="o">}</span>


	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpleParser</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">TestBean</span> <span class="n">bean</span> <span class="o">=</span> <span class="o">(</span><span class="nc">TestBean</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"testBean"</span><span class="o">);</span>
		<span class="n">assertTestBean</span><span class="o">(</span><span class="n">bean</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpleDecorator</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">TestBean</span> <span class="n">bean</span> <span class="o">=</span> <span class="o">(</span><span class="nc">TestBean</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"customisedTestBean"</span><span class="o">);</span>
		<span class="n">assertTestBean</span><span class="o">(</span><span class="n">bean</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testProxyingDecorator</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">ITestBean</span> <span class="n">bean</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ITestBean</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"debuggingTestBean"</span><span class="o">);</span>
		<span class="n">assertTestBean</span><span class="o">(</span><span class="n">bean</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="nc">AopUtils</span><span class="o">.</span><span class="na">isAopProxy</span><span class="o">(</span><span class="n">bean</span><span class="o">)).</span><span class="na">isTrue</span><span class="o">();</span>
		<span class="nc">Advisor</span><span class="o">[]</span> <span class="n">advisors</span> <span class="o">=</span> <span class="o">((</span><span class="nc">Advised</span><span class="o">)</span> <span class="n">bean</span><span class="o">).</span><span class="na">getAdvisors</span><span class="o">();</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">advisors</span><span class="o">.</span><span class="na">length</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"Incorrect number of advisors"</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">advisors</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getAdvice</span><span class="o">().</span><span class="na">getClass</span><span class="o">()).</span><span class="na">as</span><span class="o">(</span><span class="s">"Incorrect advice class"</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="nc">DebugInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testProxyingDecoratorNoInstance</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">String</span><span class="o">[]</span> <span class="n">beanNames</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBeanNamesForType</span><span class="o">(</span><span class="nc">ApplicationListener</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">beanNames</span><span class="o">).</span><span class="na">contains</span><span class="o">(</span><span class="s">"debuggingTestBeanNoInstance"</span><span class="o">)).</span><span class="na">isTrue</span><span class="o">();</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getType</span><span class="o">(</span><span class="s">"debuggingTestBeanNoInstance"</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="nc">ApplicationListener</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">assertThatExceptionOfType</span><span class="o">(</span><span class="nc">BeanCreationException</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">isThrownBy</span><span class="o">(()</span> <span class="o">-&gt;</span>
				<span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"debuggingTestBeanNoInstance"</span><span class="o">))</span>
			<span class="o">.</span><span class="na">satisfies</span><span class="o">(</span><span class="n">ex</span> <span class="o">-&gt;</span> <span class="n">assertThat</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getRootCause</span><span class="o">()).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">BeanInstantiationException</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testChainedDecorators</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">ITestBean</span> <span class="n">bean</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ITestBean</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"chainedTestBean"</span><span class="o">);</span>
		<span class="n">assertTestBean</span><span class="o">(</span><span class="n">bean</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="nc">AopUtils</span><span class="o">.</span><span class="na">isAopProxy</span><span class="o">(</span><span class="n">bean</span><span class="o">)).</span><span class="na">isTrue</span><span class="o">();</span>
		<span class="nc">Advisor</span><span class="o">[]</span> <span class="n">advisors</span> <span class="o">=</span> <span class="o">((</span><span class="nc">Advised</span><span class="o">)</span> <span class="n">bean</span><span class="o">).</span><span class="na">getAdvisors</span><span class="o">();</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">advisors</span><span class="o">.</span><span class="na">length</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"Incorrect number of advisors"</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">advisors</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">getAdvice</span><span class="o">().</span><span class="na">getClass</span><span class="o">()).</span><span class="na">as</span><span class="o">(</span><span class="s">"Incorrect advice class"</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="nc">DebugInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">advisors</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">getAdvice</span><span class="o">().</span><span class="na">getClass</span><span class="o">()).</span><span class="na">as</span><span class="o">(</span><span class="s">"Incorrect advice class"</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="nc">NopInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDecorationViaAttribute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">BeanDefinition</span> <span class="n">beanDefinition</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBeanDefinition</span><span class="o">(</span><span class="s">"decorateWithAttribute"</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">beanDefinition</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"objectName"</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"foo"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>  <span class="c1">// SPR-2728</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCustomElementNestedWithinUtilList</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">List</span><span class="o">&lt;?&gt;</span> <span class="n">things</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;?&gt;)</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"list.of.things"</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">things</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">things</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>  <span class="c1">// SPR-2728</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCustomElementNestedWithinUtilSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">Set</span><span class="o">&lt;?&gt;</span> <span class="n">things</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Set</span><span class="o">&lt;?&gt;)</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"set.of.things"</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">things</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">things</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Test</span>  <span class="c1">// SPR-2728</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCustomElementNestedWithinUtilMap</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">Map</span><span class="o">&lt;?,</span> <span class="o">?&gt;</span> <span class="n">things</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;?,</span> <span class="o">?&gt;)</span> <span class="k">this</span><span class="o">.</span><span class="na">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"map.of.things"</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">things</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">things</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
	<span class="o">}</span>


	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">assertTestBean</span><span class="o">(</span><span class="nc">ITestBean</span> <span class="n">bean</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">bean</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">as</span><span class="o">(</span><span class="s">"Invalid name"</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"Rob Harrop"</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">bean</span><span class="o">.</span><span class="na">getAge</span><span class="o">()).</span><span class="na">as</span><span class="o">(</span><span class="s">"Invalid age"</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">23</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="nc">Resource</span> <span class="nf">getResource</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">ClassPathResource</span><span class="o">(</span><span class="no">NS_XML</span><span class="o">);</span>
	<span class="o">}</span>


	<span class="kd">private</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">DummySchemaResolver</span> <span class="kd">extends</span> <span class="nc">PluggableSchemaResolver</span> <span class="o">{</span>

		<span class="kd">public</span> <span class="nf">DummySchemaResolver</span><span class="o">()</span> <span class="o">{</span>
			<span class="kd">super</span><span class="o">(</span><span class="no">CLASS</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="nc">InputSource</span> <span class="nf">resolveEntity</span><span class="o">(</span><span class="nc">String</span> <span class="n">publicId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">systemId</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
			<span class="nc">InputSource</span> <span class="n">source</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">resolveEntity</span><span class="o">(</span><span class="n">publicId</span><span class="o">,</span> <span class="n">systemId</span><span class="o">);</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">source</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathResource</span><span class="o">(</span><span class="no">TEST_XSD</span><span class="o">);</span>
				<span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InputSource</span><span class="o">(</span><span class="n">resource</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
				<span class="n">source</span><span class="o">.</span><span class="na">setPublicId</span><span class="o">(</span><span class="n">publicId</span><span class="o">);</span>
				<span class="n">source</span><span class="o">.</span><span class="na">setSystemId</span><span class="o">(</span><span class="n">systemId</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="k">return</span> <span class="n">source</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>


<span class="cm">/**
 * Custom namespace handler implementation.
 *	自定义名称空间处理器
 * @author Rob Harrop
 */</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="nc">TestNamespaceHandler</span> <span class="kd">extends</span> <span class="nc">NamespaceHandlerSupport</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 注册节点为 testBean 的解析器</span>
		<span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">"testBean"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">TestBeanDefinitionParser</span><span class="o">());</span>
    <span class="c1">// 注册节点为 person 的解析器</span>
		<span class="n">registerBeanDefinitionParser</span><span class="o">(</span><span class="s">"person"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">PersonDefinitionParser</span><span class="o">());</span>
		
    <span class="c1">// 注册 set 装饰器</span>
		<span class="n">registerBeanDefinitionDecorator</span><span class="o">(</span><span class="s">"set"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">PropertyModifyingBeanDefinitionDecorator</span><span class="o">());</span>
    <span class="c1">// 注册 debug 装饰器</span>
		<span class="n">registerBeanDefinitionDecorator</span><span class="o">(</span><span class="s">"debug"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">DebugBeanDefinitionDecorator</span><span class="o">());</span>
    <span class="c1">// 注册 nop 装饰器</span>
		<span class="n">registerBeanDefinitionDecorator</span><span class="o">(</span><span class="s">"nop"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">NopInterceptorBeanDefinitionDecorator</span><span class="o">());</span>
    <span class="c1">// 注册 属性为 object-name 的装饰器</span>
		<span class="n">registerBeanDefinitionDecoratorForAttribute</span><span class="o">(</span><span class="s">"object-name"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ObjectNameBeanDefinitionDecorator</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="c1">// 节点为 testBean 的解析器</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TestBeanDefinitionParser</span> <span class="kd">implements</span> <span class="nc">BeanDefinitionParser</span> <span class="o">{</span>

		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="nc">BeanDefinition</span> <span class="nf">parse</span><span class="o">(</span><span class="nc">Element</span> <span class="n">element</span><span class="o">,</span> <span class="nc">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">RootBeanDefinition</span> <span class="n">definition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RootBeanDefinition</span><span class="o">();</span>
			<span class="n">definition</span><span class="o">.</span><span class="na">setBeanClass</span><span class="o">(</span><span class="nc">TestBean</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

			<span class="nc">MutablePropertyValues</span> <span class="n">mpvs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MutablePropertyValues</span><span class="o">();</span>
			<span class="n">mpvs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
			<span class="n">mpvs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
			<span class="n">definition</span><span class="o">.</span><span class="na">setPropertyValues</span><span class="o">(</span><span class="n">mpvs</span><span class="o">);</span>

			<span class="n">parserContext</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">registerBeanDefinition</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span> <span class="n">definition</span><span class="o">);</span>
			<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="c1">// 节点为 person 的解析器</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">PersonDefinitionParser</span> <span class="kd">extends</span> <span class="nc">AbstractSingleBeanDefinitionParser</span> <span class="o">{</span>

		<span class="nd">@Override</span>
		<span class="kd">protected</span> <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getBeanClass</span><span class="o">(</span><span class="nc">Element</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">return</span> <span class="nc">TestBean</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
		<span class="o">}</span>

		<span class="nd">@Override</span>
		<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doParse</span><span class="o">(</span><span class="nc">Element</span> <span class="n">element</span><span class="o">,</span> <span class="nc">BeanDefinitionBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">builder</span><span class="o">.</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
			<span class="n">builder</span><span class="o">.</span><span class="na">addPropertyValue</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="c1">// set 装饰器</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">PropertyModifyingBeanDefinitionDecorator</span> <span class="kd">implements</span> <span class="nc">BeanDefinitionDecorator</span> <span class="o">{</span>

		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="nc">BeanDefinitionHolder</span> <span class="nf">decorate</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">,</span> <span class="nc">BeanDefinitionHolder</span> <span class="n">definition</span><span class="o">,</span> <span class="nc">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">Element</span> <span class="n">element</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Element</span><span class="o">)</span> <span class="n">node</span><span class="o">;</span>
			<span class="nc">BeanDefinition</span> <span class="n">def</span> <span class="o">=</span> <span class="n">definition</span><span class="o">.</span><span class="na">getBeanDefinition</span><span class="o">();</span>

			<span class="nc">MutablePropertyValues</span> <span class="n">mpvs</span> <span class="o">=</span> <span class="o">(</span><span class="n">def</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="k">new</span> <span class="nc">MutablePropertyValues</span><span class="o">()</span> <span class="o">:</span> <span class="n">def</span><span class="o">.</span><span class="na">getPropertyValues</span><span class="o">();</span>
			<span class="n">mpvs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
			<span class="n">mpvs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

			<span class="o">((</span><span class="nc">AbstractBeanDefinition</span><span class="o">)</span> <span class="n">def</span><span class="o">).</span><span class="na">setPropertyValues</span><span class="o">(</span><span class="n">mpvs</span><span class="o">);</span>
			<span class="k">return</span> <span class="n">definition</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="c1">// debug 装饰器</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DebugBeanDefinitionDecorator</span> <span class="kd">extends</span> <span class="nc">AbstractInterceptorDrivenBeanDefinitionDecorator</span> <span class="o">{</span>

		<span class="nd">@Override</span>
		<span class="kd">protected</span> <span class="nc">BeanDefinition</span> <span class="nf">createInterceptorDefinition</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">RootBeanDefinition</span><span class="o">(</span><span class="nc">DebugInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="c1">// nop 装饰器</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">NopInterceptorBeanDefinitionDecorator</span> <span class="kd">extends</span> <span class="nc">AbstractInterceptorDrivenBeanDefinitionDecorator</span> <span class="o">{</span>

		<span class="nd">@Override</span>
		<span class="kd">protected</span> <span class="nc">BeanDefinition</span> <span class="nf">createInterceptorDefinition</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">RootBeanDefinition</span><span class="o">(</span><span class="nc">NopInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="c1">// 属性为 object-name 的装饰器</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ObjectNameBeanDefinitionDecorator</span> <span class="kd">implements</span> <span class="nc">BeanDefinitionDecorator</span> <span class="o">{</span>

		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="nc">BeanDefinitionHolder</span> <span class="nf">decorate</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">,</span> <span class="nc">BeanDefinitionHolder</span> <span class="n">definition</span><span class="o">,</span> <span class="nc">ParserContext</span> <span class="n">parserContext</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">Attr</span> <span class="n">objectNameAttribute</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Attr</span><span class="o">)</span> <span class="n">node</span><span class="o">;</span>
			<span class="n">definition</span><span class="o">.</span><span class="na">getBeanDefinition</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"objectName"</span><span class="o">,</span> <span class="n">objectNameAttribute</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
			<span class="k">return</span> <span class="n">definition</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p>通过运行结果可以看出这个装饰器可以针对与节点或者属性进行操作,相当于IO流中的设计模式一样,进行额外的增强.</p>

<h1 id="三小结">三、小结</h1>

<p>​	解析过了,也装饰过了,那就可以注册<code class="language-plaintext highlighter-rouge">BeanDefinitionHolder</code>对象了.</p>
:ET